#! /usr/bin/env python3

import logging
import multiprocessing
import shutil
import subprocess
import sys
import os

from lab.experiment import get_run_dir as get_path_from_exp_dir_to_run_dir
from lab import tools
from math import ceil

tools.configure_logging()

ALL_SHUFFLED_TASK_IDS = %(task_order)s

def process_task(index):
    use_scratch = %(use_scratch)s
    run_id = ALL_SHUFFLED_TASK_IDS[index]
    rel_path = get_path_from_exp_dir_to_run_dir(run_id)
    shm_run_dir = os.path.join("%(exp_path)s", rel_path)
    scratch_run_dir = str(run_id)
    if use_scratch:
        shutil.move(shm_run_dir, scratch_run_dir)
    run_dir =  scratch_run_dir if use_scratch else shm_run_dir
    error = False
    with open(os.path.join(run_dir, "driver.log"), "w") as driver_log:
        with open(os.path.join(run_dir, "driver.err"), "w") as driver_err:
            logging.info(f"Starting run {run_id} in {os.path.abspath(run_dir)}")
            try:
                subprocess.check_call(
                    [tools.get_python_executable(), "run"],
                    cwd=run_dir, stdout=driver_log, stderr=driver_err)
            except subprocess.CalledProcessError as err:
                error = True
            logging.info(f"Finished run {run_id} in {os.path.abspath(run_dir)}")
    if os.path.getsize(driver_err.name) != 0:
        error = True
    for f in [driver_log, driver_err]:
        if os.path.getsize(f.name) == 0:
            os.remove(f.name)
    if use_scratch:
        shutil.move(scratch_run_dir, shm_run_dir)
    return error


def main():
    batch_index = int(sys.argv[1])
    num_batches = int(sys.argv[2])
    num_all_tasks = len(ALL_SHUFFLED_TASK_IDS)
    max_batch_size = ceil(num_all_tasks / num_batches)
    pool = multiprocessing.Pool(processes=%(processes)d)
    batch_start_index = batch_index * max_batch_size
    batch_end_index = min((batch_index + 1) * max_batch_size, num_all_tasks)
    num_tasks_batch = batch_end_index - batch_start_index

    logging.info(f"Start running batch of size {num_tasks_batch}:\n"
                 f"{ALL_SHUFFLED_TASK_IDS[batch_start_index:batch_end_index]}")
    result = pool.map_async(process_task, range(batch_start_index, batch_end_index), chunksize=1)
    try:
        # Use "timeout" to fix passing KeyboardInterrupts from children
        # (see https://stackoverflow.com/questions/1408356).
        result.wait(timeout=9999999)
    except KeyboardInterrupt:
        logging.warning("Main script interrupted")
        pool.terminate()
    finally:
        pool.close()
        logging.info("Joining pool processes")
        pool.join()

    if any(result.get()):
        sys.exit("Error: At least one run failed.")


if __name__ == "__main__":
    main()
